#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("matricial-keyboard:server");
var http = require("http");

// const { createServer } = require("node:http");
// const { join } = require("node:path");
const { Server } = require("socket.io");
const { SerialPort } = require("serialport");
const fs = require("fs");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create SOCKET io.
 */
const io = new Server(server);
io.on("connection", (socket) => {
  console.log("a user connected");
});

/**
 * Create SERIALPORT conection.
 */
const portName = "/dev/ttyUSB0";
//check port available
fs.access(portName, fs.constants.F_OK, (err) => {
  if (err) {
    console.log("El puerto " + portName + " no existe.");
    io.on("connection", (socket) => {
      console.log("a user connected");
      console.log(socket);
      io.emit("arduino:data", {
        //value: data.toString()
        value: "el puerto no existe",
      });
    });
  } else {
    console.log("El puerto " + portName + " existe.");
    //config
    var sPort = new SerialPort({
      path: portName,
      baudRate: 9600,
    });
    sPort.on("open", function () {
      console.log("Opened Port.");
    });
    sPort.on("data", (data) => {
      io.emit("arduino:data", {
        value: data.toString(),
      });
    });
    sPort.on("err", function (data) {
      console.log(err.message);
    });
    io.on("connection", (socket) => {
      socket.on("complete", () => {
        sPort.write("c");
        console.log("complete");
      });
    });
  }
});

// sPort.on("error", (err) => {
//   console.log("error");
// });

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
